# This is Git's per-user configuration file.
[user]
	name = Adrian Forsius
	signingkey = 6FADEE05C3DE7B1A
	email = adrianforsius@gmail.com
[gpg]
	program = /usr/local/bin/gpg
[commit]
	#gpgsign = true
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "ssh://git@github.com/credijusto/"]
	insteadOf = "https://github.com/credijusto/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[push]
	default = matching
[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	rev = "!f() { git rev-list --count HEAD ^master; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!f() { git rebase -i HEAD~$1; }; f"
	#
	rem = "!f() { git rebase origin/master; }; f"
	# Push to own branchh
	ne = "!f() { git commit --no-verify --amend --no-edit; }; f"
	# Find branches containing commit
	e = "!f() { git config --global -e; }; f"
	# Master rebase
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# set upstream
	up = "!git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD)"
	# Push to own branchh
	po = "!git push origin \"$(git rev-parse --abbrev-ref HEAD)\""
	# Make temporal wip commit
	w = "!git commit --no-verify -m wip"
	# Reset head one back
	rh = "!git reset HEAD~1"
	# List recent checked out branches
	lb = "!f() { git for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(authorname) %(refname:short)' | head -n 15; }; f"
	# List commits between dates
	lc = "!f() { git log --pretty=format:'%ad - %an: %s %H' --after='$(date --date=\"10 days ago\")' --until='$(date)'; }; f"
	# count commits since master
	ccm = "!git rev-list --count HEAD ^master"
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
	ui = auto
[diff]
	tool = vimdiff
	wsErrorHighlight = all
[merge]
	conflictstyle = diff3
	tool = vimdiff
[mergetool]
	keepBackup = false
	prompt = false
	tool = vimdiff
[pull]
	rebase = true
[pager]
	branch = false
